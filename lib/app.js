// Generated by CoffeeScript 1.4.0
(function() {
  var coffee, connect, connect_assets, defaultConfig, exists, express, express_Utils, express_View, fs, hogan, hoganCompilers, hoganTemplateRenderers, htc, http, io, iolog, jade, ksApp, ksSubApp, nib, path, stylus, util, utils, winston, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  http = require('http');

  express = require('express');

  express_View = require('express/lib/view');

  express_Utils = require('express/lib/utils');

  coffee = require('coffee-script');

  path = require('path');

  fs = require('fs');

  connect = require('connect');

  jade = require('jade');

  stylus = require('stylus');

  nib = require('nib');

  io = require('socket.io');

  iolog = require('socket.io/lib/logger');

  hogan = require('hogan.js');

  htc = require('hogan-template-compiler');

  connect_assets = require('connect-assets');

  exists = fs.existsSync || path.existsSync;

  winston = require('winston');

  util = require('util');

  utils = require('./utils');

  defaultConfig = require('./defaultConfig');

  hoganTemplateRenderers = [];

  hoganCompilers = [];

  ksSubApp = (function() {

    function ksSubApp(dir, name, parent) {
      var default_values, entry, key, method, pathname, _i, _j, _len, _len1, _ref, _ref1;
      this.dir = dir;
      this.logger = parent.logger;
      this.config = utils.deepExtend({}, parent.config);
      this.config.sub = {
        parent: parent,
        path: "" + this.dir + "/" + name
      };
      if (this.config.debug) {
        this.logger.log('info', "" + this.config.sub.path + ": autodiscovering");
      }
      parent.setupPublic("" + this.config.sub.path);
      this.obj = require("" + this.config.sub.path);
      this.config.sub.name = this.obj.name || name;
      this.config.sub.prefix = this.obj.prefix || '';
      this.config.sub.plural = this.obj.plural || ("" + this.config.sub.name + "s");
      this.config.locals.config = this.config;
      this.config.locals.sub = this.config.sub;
      this.app = express();
      if (this.obj.engine) {
        this.app.set('view engine', this.obj.engine);
      }
      this.config.locals.dirs = this.config.dirs = [this.config.sub.path].concat(this.config.dirs.slice(0));
      this.app.set('views', [
        (function() {
          var _i, _len, _ref, _results;
          _ref = this.config.dirs;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            dir = _ref[_i];
            _results.push("" + dir + "/views");
          }
          return _results;
        }).call(this)
      ][0]);
      if (this.obj.before_all) {
        this.app.all('*', this.obj.before_all);
      }
      if (this.obj.before_any_child) {
        this.app.all('#{@config.sub.name}', this.obj.before_any_child);
      }
      if (this.obj.before) {
        _ref = ["/" + this.config.sub.name + "/:" + this.config.sub.name + "_id", "/" + this.config.sub.name + "/:" + this.config.sub.name + "_id/*"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pathname = _ref[_i];
          this.app.all("" + this.config.sub.prefix + pathname, this.obj.before);
          this.logger.log('info', "" + this.config.sub.prefix + pathname + ": ALL " + pathname + " -> before");
        }
      }
      if (this.obj.locals) {
        utils.deepExtend(this.config.locals, this.obj.locals);
      }
      for (key in this.obj) {
        if (~['open', 'name', 'plural', 'prefix', 'engine', 'before', 'locals', 'custom', 'before_all', 'before_any_child'].indexOf(key)) {
          continue;
        }
        method = 'get';
        switch (key) {
          case "show_json":
            pathname = "/" + this.config.sub.name + "/:" + this.config.sub.name + "_id/json";
            break;
          case "show":
            pathname = "/" + this.config.sub.name + "/:" + this.config.sub.name + "_id";
            break;
          case "list":
            pathname = "/" + this.config.sub.plural;
            break;
          case "list_json":
            pathname = "/" + this.config.sub.plural + "/json";
            break;
          case 'edit':
            pathname = "/" + this.config.sub.name + "/:" + this.config.sub.name + "_id/edit";
            break;
          case 'update':
            method = 'put';
            pathname = "/" + this.config.sub.name + "/:" + this.config.sub.name + "_id";
            break;
          case 'delete':
            method = 'delete';
            pathname = "/" + this.config.sub.name + "/:" + this.config.sub.name + "_id";
            break;
          case 'create':
            method = 'post';
            pathname = "/" + this.config.sub.name;
            break;
          case 'index':
            pathname = '/';
            break;
          default:
            this.logger.log('error', "Unrecognized route: " + this.config.sub.name + "." + key);
        }
        pathname = this.config.sub.prefix + pathname;
        this.logger.log('info', "" + this.config.sub.path + ": handler " + method + "(" + pathname + ") -> " + (typeof this.obj[key]));
        this.app[method](pathname, this.obj[key]);
      }
      if (this.obj.custom != null) {
        _ref1 = this.obj.custom;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          entry = _ref1[_j];
          default_values = {
            method: 'get',
            path: null,
            callback: null
          };
          entry = _.defaults(entry, default_values);
          this.logger.log('info', "" + this.config.sub.path + ": custom " + entry.method + "(" + entry.path + ") -> " + (typeof entry.callback));
          this.app[entry.method](entry.path, entry.callback);
        }
      }
      this.app.locals = this.config.locals;
      parent.use(this.app);
      if (this.obj.open != null) {
        this.obj.open(this, parent);
      }
    }

    return ksSubApp;

  })();

  ksApp = (function() {

    ksApp.prototype.subapps = {};

    function ksApp(ks) {
      this.ks = ks;
      this.run = __bind(this.run, this);

      this.setupPublic = __bind(this.setupPublic, this);

      this.ksAppConfigure = __bind(this.ksAppConfigure, this);

      this.autodiscover_load = __bind(this.autodiscover_load, this);

      this.autodiscover = __bind(this.autodiscover, this);

      this.restrict = __bind(this.restrict, this);

      this.configure = __bind(this.configure, this);

      this.post = __bind(this.post, this);

      this.listen = __bind(this.listen, this);

      this.set = __bind(this.set, this);

      this.get = __bind(this.get, this);

      this.use = __bind(this.use, this);

      this.ksAppInit = __bind(this.ksAppInit, this);

      this.logger = new winston.Logger({
        transports: [
          new winston.transports.Console({
            colorize: true,
            timestamp: true,
            level: 'info'
          })
        ]
      });
      this.config = coffee.helpers.merge(defaultConfig, this.ks.config);
      this.config.locals = coffee.helpers.merge(defaultConfig.locals, this.config.locals);
      this.config.locals.print_errors = this.config.debug;
      this.config.locals.dirs = this.config.dirs;
      this.process = process;
      this.iolog = new iolog();
      this.ksAppInit();
      if (this.config.ksAppConfigure) {
        this.ksAppConfigure();
      }
    }

    ksApp.create = function(ks) {
      return new ksApp(ks);
    };

    ksApp.prototype.ksAppInit = function() {
      this.express = this.app = express();
      this.http = http.createServer(this.app);
      this.io = io.listen(this.http);
      this.io.enable('browser client minification');
      this.io.enable('browser client etag');
      this.io.enable('browser client gzip');
      return this.io.set('log level', 2);
    };

    ksApp.prototype.use = function() {
      return this.app.use.apply(this.app, arguments);
    };

    ksApp.prototype.get = function() {
      return this.app.get.apply(this.app, arguments);
    };

    ksApp.prototype.set = function() {
      return this.app.set.apply(this.app, arguments);
    };

    ksApp.prototype.listen = function() {
      return this.app.listen.apply(this.app, arguments);
    };

    ksApp.prototype.post = function() {
      return this.app.post.apply(this.app, arguments);
    };

    ksApp.prototype.configure = function() {
      return this.app.configure.apply(this.app, arguments);
    };

    ksApp.prototype.restrict = function(req, res, next) {
      if (req.session.user) {
        return next();
      } else {
        req.session.error = "Access denied !";
        return res.redirect("/login");
      }
    };

    ksApp.prototype.autodiscover = function(dir, options) {
      var availables, loaded, module, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (options == null) {
        options = {};
      }
      if ((_ref = options.order) == null) {
        options.order = {};
      }
      availables = fs.readdirSync(dir);
      loaded = {};
      _ref1 = options.order;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        module = _ref1[_i];
        if (__indexOf.call(availables, module) >= 0) {
          this.autodiscover_load(dir, module);
          loaded[module] = true;
        } else {
          console.error("module " + module + " is not available");
        }
      }
      _results = [];
      for (_j = 0, _len1 = availables.length; _j < _len1; _j++) {
        module = availables[_j];
        if (loaded[module] == null) {
          _results.push(this.autodiscover_load(dir, module));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ksApp.prototype.autodiscover_load = function(dir, name) {
      if (dir[0] !== '/') {
        dir = "" + this.config.dirname + "/" + dir;
      }
      return this.subapps["" + dir + "/" + name] = new ksSubApp(dir, name, this);
    };

    ksApp.prototype.ksAppConfigure = function() {
      var dir, lookupProxy, winstonStream, _i, _len, _ref,
        _this = this;
      require('jade').Parser.prototype.parseExtends = function() {
        var dir, dirs, parser, pathname, shortpath, str, _i, _j, _len, _len1, _ref;
        path = require('path');
        fs = require('fs');
        if (!this.filename) {
          throw new Error('the "filename" option is required to extend templates');
        }
        shortpath = this.expect('extends').val.trim();
        dirs = [];
        _ref = this.options.dirs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dir = _ref[_i];
          dirs.push("" + dir + "/views");
        }
        dirs = [path.dirname(this.filename)].concat(dirs);
        for (_j = 0, _len1 = dirs.length; _j < _len1; _j++) {
          dir = dirs[_j];
          pathname = path.join(dir, "" + shortpath + ".jade");
          if (exists(pathname)) {
            break;
          }
        }
        str = fs.readFileSync(pathname, 'utf8');
        parser = new jade.Parser(str, pathname, this.options);
        parser.blocks = this.blocks;
        parser.contexts = this.contexts;
        this.extending = parser;
        return new jade.nodes.Literal('');
      };
      this.set('views', [
        (function() {
          var _i, _len, _ref, _results;
          _ref = this.config.dirs;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            dir = _ref[_i];
            _results.push("" + dir + "/views");
          }
          return _results;
        }).call(this)
      ][0]);
      lookupProxy = express_View.prototype.lookup;
      lookupProxy = function(pathname) {
        var ext;
        ext = this.ext;
        if (!express_Utils.isAbsolute(pathname)) {
          pathname = path.join(this.root, pathname);
        }
        if (exists(pathname)) {
          return pathname;
        }
        pathname = path.join(path.dirname(pathname), path.basename(pathname, ext), 'index' + ext);
        if (exists(pathname)) {
          return pathname;
        }
      };
      express_View.prototype.lookup = function(pathname) {
        var matchedView, root, roots, _i, _len;
        if (this.root instanceof Array) {
          roots = this.root.slice(0);
          matchedView = null;
          for (_i = 0, _len = roots.length; _i < _len; _i++) {
            root = roots[_i];
            this.root = root;
            matchedView = lookupProxy.call(this, pathname);
            if (matchedView) {
              break;
            }
          }
          this.root = roots;
          return matchedView;
        }
        return lookupProxy.call(this, pathname);
      };
      this.set('view options', this.config.viewOptions);
      this.set('view engine', this.config.viewEngine);
      this.app.response.message = function(msg, type) {
        var sess;
        if (type == null) {
          type = 'info';
        }
        sess = this.req.session;
        sess.messages = sess.messages || {};
        sess.messages[type] = sess.messages[type] || [];
        sess.messages[type].push(msg);
        return this;
      };
      this.config.locals.pretty = !!this.config.viewOptions.pretty;
      winstonStream = {
        write: function(message, encoding) {
          return winston.info(message);
        }
      };
      this.use(express.logger({
        stream: winstonStream
      }));
      this.use(express.bodyParser());
      this.use(express.methodOverride());
      _ref = this.config.dirs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dir = _ref[_i];
        this.setupPublic(dir);
      }
      if (this.config.session || this.config.cookie) {
        this.use(express.cookieParser(this.config.cookie_secret || utils.uniqueId(12)));
      }
      if (this.config.session) {
        this.use(express.session(this.config.session_secret || utils.uniqueId(12)));
        this.use(function(req, res, next) {
          var count, msgs, type;
          msgs = req.session.messages || {};
          count = 0;
          for (type in msgs) {
            count += msgs[type].length;
          }
          res.locals.messages = msgs;
          res.locals.hasMessages = !!count;
          req.session.messages = {};
          return next();
        });
      }
      this.use(function(req, res, next) {
        res.locals.current = req.url;
        return next();
      });
      this.use(this.app.router);
      if (this.config.compress) {
        this.use(express.compress());
      }
      this.configure('development', function() {
        _this.use(express.errorHandler());
        return _this.config.locals.pretty = true;
      });
      this.configure('production', function() {
        if (_this.config.compress) {
          return _this.logger.log('info', "TODO: compress gzip");
        }
      });
      this.app.locals = this.config.locals;
      return this.app.get('/templates.js', function(req, res) {
        var htr, _j, _len1;
        res.contentType('application/javascript');
        for (_j = 0, _len1 = hoganTemplateRenderers.length; _j < _len1; _j++) {
          htr = hoganTemplateRenderers[_j];
          _this.logger.log('info', htr);
          if (_this.config.debug) {
            htr.read();
          }
          res.send(htr.getSharedTemplates());
          return;
        }
        return res.write(';');
      });
    };

    ksApp.prototype.setupPublic = function(dir) {
      var context, favicon, hoganTemplateRenderer, image_paths, middleware, options, parent_name, pathname, _dir, _i, _len, _ref;
      if (!exists("" + dir + "/public")) {
        return;
      }
      parent_name = utils.getParentFolderName(dir, ["lib"]);
      this.config.locals["" + parent_name + "_assets"] = global[parent_name] = context = {};
      favicon = "" + dir + "/public/favicon.ico";
      if (exists(favicon)) {
        this.use(express.favicon(favicon, {
          maxAge: this.config.staticMaxAge * 1000
        }));
      }
      if (this.config.connect_assets) {
        if (exists("" + dir + "/public")) {
          if (this.config.debug) {
            this.logger.log('info', "ASSETS " + dir + "/public");
          }
          options = {
            src: "" + dir + "/public",
            helperContext: context
          };
          if (/tapas$/.test(dir)) {
            options.build = true;
            options.detectChanges = false;
          }
          middleware = connect_assets(options);
          this.use(middleware);
          context.css.root = '.';
          context.img.root = '.';
          context.js.root = '.';
        }
      }
      if (this.config.stylus) {
        if (this.config.debug) {
          this.logger.log('info', "setup public: " + dir + "/public");
        }
        _ref = this.config.dirs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _dir = _ref[_i];
          image_paths = "" + _dir + "/public/images";
        }
        middleware = stylus.middleware({
          debug: this.config.debug,
          src: "" + dir + "/public",
          dest: "" + dir + "/public",
          compile: function(str, path, fn) {
            var s;
            s = stylus(str);
            s.set('filename', path);
            s.set('warn', true);
            s.set('compress', true);
            s.define('img', stylus.url({
              paths: image_paths,
              limit: 1000000
            }));
            if (fn != null) {
              s.render(fn);
            }
            return s;
          }
        });
        this.use(middleware);
      }
      if (this.config.hogan) {
        pathname = "" + dir + "/public/partials";
        if (exists(pathname)) {
          this.logger.log('info', "setup hogan: " + pathname);
          hoganTemplateRenderer = htc({
            partialsDirectory: pathname,
            layoutsDirectory: pathname
          });
          hoganTemplateRenderers.push(hoganTemplateRenderer);
          hoganCompilers.push({
            compile: function(source, options) {
              var template;
              template = hoganTemplateRenderer.getTemplate(options.filename);
              return function(locals) {
                return template.render(locals, hoganTemplateRenderer.getPartials());
              };
            }
          });
        }
      }
      return this.use(express["static"]("" + dir + "/public", {
        maxAge: this.config.staticMaxAge * 1000
      }));
    };

    ksApp.prototype.run = function() {
      var host, port,
        _this = this;
      this.configure('development', function() {
        return _this.use(function(req, res, next) {
          var htr, _i, _len;
          for (_i = 0, _len = hoganTemplateRenderers.length; _i < _len; _i++) {
            htr = hoganTemplateRenderers[_i];
            _this.logger.log('info', htr);
            htr.read();
          }
          return next();
        });
      });
      if (true) {
        this.app.use(function(err, req, res, next) {
          if (~err.message.indexOf('not found')) {
            return next();
          }
          _this.logger.log('info', 'error, err.stack');
          _this.logger.log('error', err.stack);
          console.dir(err);
          return res.status(500).render('5xx', {
            title: "500: Internal Server Error",
            error: err,
            stack: err.stack
          });
        });
      }
      this.app.use(function(req, res, next) {
        return res.status(404).render('404', {
          title: "404: Not Found",
          url: req.originalUrl
        });
      });
      port = this.process.env.PORT || this.config.port;
      host = this.process.env.HOST || null;
      this.http.listen(port, host, function() {
        return _this.logger.log('log', "Tapas server listening on port " + port);
      });
      process.on('uncaughtException', this.iolog.error.bind(this.log));
      return this.iolog.info('Tapas server started');
    };

    return ksApp;

  })();

  module.exports = ksApp.create;

}).call(this);
